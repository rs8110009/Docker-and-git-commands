pipeline {
    agent any

    environment {
        REMOTE_USER = "devweb"
        REMOTE_HOST = "205.209.111.56"
        SSH_KEY = "/var/lib/jenkins/.ssh/id_rsa"
        IMAGE_NAME = "yadavji786/jenkins-test-proj"
        DOCKERHUB_CREDENTIALS = "testprojwithjenkins"
        CONTAINER_NAME = "testproj-container"
        APP_PORT = "8004"
        CONTAINER_PORT = "80"
    }

    stages {

        stage('Checkout Code') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        credentialsId: 'jenkins-private-key-for-ssh',
                        url: 'git@bitbucket.org:puneetmeta/testprojwithjenkins.git'
                    ]]
                )
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: DOCKERHUB_CREDENTIALS,
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {

                        sh '''
                            set -e
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} .
                            docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest
                            docker push ${IMAGE_NAME}:${BUILD_NUMBER}
                            docker push ${IMAGE_NAME}:latest
                            docker logout
                        '''
                    }
                }
            }
        }

        stage('Deploy on Remote Server') {
            steps {
                script {
                    sh '''
                        ssh -i ${SSH_KEY} ${REMOTE_USER}@${REMOTE_HOST} "
                            set -e
                            echo 'üõë Stopping old container if exists...'
                            docker stop ${CONTAINER_NAME} || true
                            docker rm ${CONTAINER_NAME} || true

                            echo 'üßπ Removing old image...'
                            docker rmi ${IMAGE_NAME}:latest || true

                            echo '‚¨áÔ∏è Pulling latest image from DockerHub...'
                            docker pull ${IMAGE_NAME}:latest

                            echo 'üöÄ Starting new container...'
                            docker run -d --name ${CONTAINER_NAME} -p ${APP_PORT}:${CONTAINER_PORT} ${IMAGE_NAME}:latest
                        "
                    '''
                }
            }
        }
    }
}

